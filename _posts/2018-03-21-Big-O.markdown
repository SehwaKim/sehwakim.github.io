---
layout: post
title:  "Big-O 표기법 정리"
crawlertitle:
summary: 
date:   2018-03-21
categories: posts
tags: 'big-o'
---

*알고리즘 효율 측정 기준*
1. 시간복잡도(시간이 얼마나 걸리는지. CPU 사용량) 
2. 공간복잡도(차지하는 메모리량. RAM 사용량)

*시간복잡도 - 알고리즘의 속도*
입력데이터가 n개일때 CPU의 계산 속도 (입력이 n일 때 연산 횟수) = 알고리즘 속도
알고리즘은 연산이 많아질수록 그 속도가 오래 걸린다. 
따라서 시간 복잡도는 알고리즘 내 **연산의 횟수**와 관계가 있음

*ex) 1~100 더하는 프로그램 VS 1~1000 더하는 프로그램 속도비교*
덧셈 99번 VS 덧셈 999번
--> 연산의 횟수가 적은 것이 빠를 것이다. 여기 두 프로그램은 같은 알고리즘이어도 입력되는 데이터에 따라 속도 달라지고 있다.

서로 다른 두 개의 알고리즘을 비교하려면 같은 데이터 n을 입력했을때의 속도를 비교해봐야 함
여기서 big O가 나온다

*big O의 정의*
알고리즘의 **시간 복잡도**를 수학적으로 나타내는 표기법이며, **O(f(n))**으로 나타낸다.
big O 표기법은 "아무리 느려도 이정도다"라는 뜻으로 최악의 경우(Worst Case)를 나타내는 표기법이다.

*big O 적용법*
1. 입력값을 확인하여 무엇을 변수 N으로 놓을지 정한다.
2. 알고리즘에서 수행할 연산의 횟수를 N의 식으로 표현한다.
3. 차수가 가장 높은 N항만 남긴다. ex) O(n^2+n)->O(n^2)
4. 모든 상수인수는 무시한다. ex) O(2n)->O(n), O(n^2+3)->O(n^2)

*big O 성능 순서*
빠른순서대로
**O(1) -> O(logN) -> O(n) -> O(nlogn), O(n^k), O(2^n), O(n!)**

![Image](time.png)

1. O(1) : 상수 시간. 항상 일정한 시간에 완료
*대표적 예시 - 배열에서 특정 인덱스값 참조하기*
-> 데이터가 아무리 증가해도 (배열의 길이가 10이든 100이든) 처리시간에 변함이 없다.

2. O(logN) : 로그 시간 
*대표적 예시 - 이진탐색*
-> 데이터가 증가해도 처리시간이 크게 상승하진 않음

3. O(n) : 선형 시간
*대표적 예시 - 순차탐색*
-> 데이터 증가시 처리 시간이 언제나 같은 비율로 증가해서 그래프가 직선으로 표현된다.

4. O(nlogn) : 선형로그 시간
*대표적 예시 - quick sort, heap sort (가장 빠른 sort들)*
-> 선형로그 항은 선형 항 보다는 빠르게 증가하지만, 1보다 큰 지수를 가진 n의 다항식보다는 느리다. 많은 경우에, O(nlogn) 수행시간은 간단히 O(logN) 연산의 n 배 수행시간의 결과를 가진다.

5. O(n^k)
6. O(2^n)
7. O(n!)